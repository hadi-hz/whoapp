// Mocks generated by Mockito 5.4.6 from annotations
// in test3/test/features/home/home_page_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:test3/features/home/domain/entities/assign_role_entity.dart'
    as _i14;
import 'package:test3/features/home/domain/entities/get_alert_entity.dart'
    as _i19;
import 'package:test3/features/home/domain/entities/get_filter_alert.dart'
    as _i20;
import 'package:test3/features/home/domain/entities/team_entity.dart' as _i16;
import 'package:test3/features/home/domain/entities/team_filter_entity.dart'
    as _i17;
import 'package:test3/features/home/domain/entities/user_detail_entity.dart'
    as _i12;
import 'package:test3/features/home/domain/entities/users_entity.dart' as _i10;
import 'package:test3/features/home/domain/repositories/assign_role_repository.dart'
    as _i5;
import 'package:test3/features/home/domain/repositories/get_alert_repository.dart'
    as _i7;
import 'package:test3/features/home/domain/repositories/team_repository.dart'
    as _i6;
import 'package:test3/features/home/domain/repositories/user_detail_repository.dart'
    as _i4;
import 'package:test3/features/home/domain/repositories/users_repository.dart'
    as _i2;
import 'package:test3/features/home/domain/usecase/assign_role_usecase.dart'
    as _i13;
import 'package:test3/features/home/domain/usecase/get_alert_usecase.dart'
    as _i18;
import 'package:test3/features/home/domain/usecase/team_usecase.dart' as _i15;
import 'package:test3/features/home/domain/usecase/user_detail_ussecase.dart'
    as _i11;
import 'package:test3/features/home/domain/usecase/users_usecase.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeUsersRepository_0 extends _i1.SmartFake
    implements _i2.UsersRepository {
  _FakeUsersRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserDetailRepository_2 extends _i1.SmartFake
    implements _i4.UserDetailRepository {
  _FakeUserDetailRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAssignRoleRepository_3 extends _i1.SmartFake
    implements _i5.AssignRoleRepository {
  _FakeAssignRoleRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamsRepository_4 extends _i1.SmartFake
    implements _i6.TeamsRepository {
  _FakeTeamsRepository_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAlertListRepository_5 extends _i1.SmartFake
    implements _i7.AlertListRepository {
  _FakeAlertListRepository_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllUsersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllUsersUseCase extends _i1.Mock
    implements _i8.GetAllUsersUseCase {
  MockGetAllUsersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UsersRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeUsersRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.UsersRepository);

  @override
  _i9.Future<_i3.Either<String, List<_i10.UserEntity>>> call(
    _i10.UsersFilterEntity? filter,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [filter]),
            returnValue:
                _i9.Future<_i3.Either<String, List<_i10.UserEntity>>>.value(
                  _FakeEither_1<String, List<_i10.UserEntity>>(
                    this,
                    Invocation.method(#call, [filter]),
                  ),
                ),
          )
          as _i9.Future<_i3.Either<String, List<_i10.UserEntity>>>);
}

/// A class which mocks [GetUserDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserDetailUseCase extends _i1.Mock
    implements _i11.GetUserDetailUseCase {
  MockGetUserDetailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserDetailRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeUserDetailRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.UserDetailRepository);

  @override
  _i9.Future<_i3.Either<String, _i12.UserDetailEntity>> call({
    required String? userId,
    required String? currentUserId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #userId: userId,
              #currentUserId: currentUserId,
            }),
            returnValue:
                _i9.Future<_i3.Either<String, _i12.UserDetailEntity>>.value(
                  _FakeEither_1<String, _i12.UserDetailEntity>(
                    this,
                    Invocation.method(#call, [], {
                      #userId: userId,
                      #currentUserId: currentUserId,
                    }),
                  ),
                ),
          )
          as _i9.Future<_i3.Either<String, _i12.UserDetailEntity>>);
}

/// A class which mocks [AssignRoleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssignRoleUseCase extends _i1.Mock implements _i13.AssignRoleUseCase {
  MockAssignRoleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AssignRoleRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAssignRoleRepository_3(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i5.AssignRoleRepository);

  @override
  _i9.Future<_i3.Either<String, _i14.AssignRoleEntity>> call({
    required String? userId,
    required String? roleName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #userId: userId,
              #roleName: roleName,
            }),
            returnValue:
                _i9.Future<_i3.Either<String, _i14.AssignRoleEntity>>.value(
                  _FakeEither_1<String, _i14.AssignRoleEntity>(
                    this,
                    Invocation.method(#call, [], {
                      #userId: userId,
                      #roleName: roleName,
                    }),
                  ),
                ),
          )
          as _i9.Future<_i3.Either<String, _i14.AssignRoleEntity>>);
}

/// A class which mocks [GetAllTeamsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTeamsUseCase extends _i1.Mock
    implements _i15.GetAllTeamsUseCase {
  MockGetAllTeamsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.TeamsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTeamsRepository_4(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i6.TeamsRepository);

  @override
  _i9.Future<_i3.Either<String, List<_i16.TeamEntity>>> call(
    _i17.TeamsFilterEntity? filter,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [filter]),
            returnValue:
                _i9.Future<_i3.Either<String, List<_i16.TeamEntity>>>.value(
                  _FakeEither_1<String, List<_i16.TeamEntity>>(
                    this,
                    Invocation.method(#call, [filter]),
                  ),
                ),
          )
          as _i9.Future<_i3.Either<String, List<_i16.TeamEntity>>>);
}

/// A class which mocks [GetAlertsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAlertsUseCase extends _i1.Mock implements _i18.GetAlertsUseCase {
  MockGetAlertsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AlertListRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAlertListRepository_5(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i7.AlertListRepository);

  @override
  _i9.Future<_i3.Either<String, List<_i19.AlertEntity>>> call(
    _i20.AlertFilterEntity? filter,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [filter]),
            returnValue:
                _i9.Future<_i3.Either<String, List<_i19.AlertEntity>>>.value(
                  _FakeEither_1<String, List<_i19.AlertEntity>>(
                    this,
                    Invocation.method(#call, [filter]),
                  ),
                ),
          )
          as _i9.Future<_i3.Either<String, List<_i19.AlertEntity>>>);
}
