// Mocks generated by Mockito 5.4.6 from annotations
// in test3/test/features/profile/profile_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:io' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:test3/features/profile/domain/entities/change_password.dart'
    as _i5;
import 'package:test3/features/profile/domain/entities/info_user.dart' as _i3;
import 'package:test3/features/profile/domain/entities/update_user.dart' as _i4;
import 'package:test3/features/profile/domain/repositories/get_user_info_repository.dart'
    as _i2;
import 'package:test3/features/profile/domain/usecase/chnage_password_usecase.dart'
    as _i10;
import 'package:test3/features/profile/domain/usecase/get_user_info_usecase.dart'
    as _i6;
import 'package:test3/features/profile/domain/usecase/update_user_profile_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserInfo_1 extends _i1.SmartFake implements _i3.UserInfo {
  _FakeUserInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserUpdate_2 extends _i1.SmartFake implements _i4.UserUpdate {
  _FakeUserUpdate_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChangePassword_3 extends _i1.SmartFake
    implements _i5.ChangePassword {
  _FakeChangePassword_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetUserProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserProfile extends _i1.Mock implements _i6.GetUserProfile {
  MockGetUserProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeUserRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.UserRepository);

  @override
  _i7.Future<_i3.UserInfo> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i7.Future<_i3.UserInfo>.value(
              _FakeUserInfo_1(this, Invocation.method(#call, [userId])),
            ),
          )
          as _i7.Future<_i3.UserInfo>);
}

/// A class which mocks [UpdateUserProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserProfile extends _i1.Mock implements _i8.UpdateUserProfile {
  MockUpdateUserProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeUserRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.UserRepository);

  @override
  _i7.Future<_i4.UserUpdate> call({
    required String? userId,
    required String? name,
    required String? lastname,
    _i9.File? profilePhoto,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #userId: userId,
              #name: name,
              #lastname: lastname,
              #profilePhoto: profilePhoto,
            }),
            returnValue: _i7.Future<_i4.UserUpdate>.value(
              _FakeUserUpdate_2(
                this,
                Invocation.method(#call, [], {
                  #userId: userId,
                  #name: name,
                  #lastname: lastname,
                  #profilePhoto: profilePhoto,
                }),
              ),
            ),
          )
          as _i7.Future<_i4.UserUpdate>);
}

/// A class which mocks [ChangePasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePasswordUseCase extends _i1.Mock
    implements _i10.ChangePasswordUseCase {
  MockChangePasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeUserRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.UserRepository);

  @override
  _i7.Future<_i5.ChangePassword> call({
    required String? userId,
    required String? currentPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #userId: userId,
              #currentPassword: currentPassword,
              #newPassword: newPassword,
            }),
            returnValue: _i7.Future<_i5.ChangePassword>.value(
              _FakeChangePassword_3(
                this,
                Invocation.method(#call, [], {
                  #userId: userId,
                  #currentPassword: currentPassword,
                  #newPassword: newPassword,
                }),
              ),
            ),
          )
          as _i7.Future<_i5.ChangePassword>);
}
