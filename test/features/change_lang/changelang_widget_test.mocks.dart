// Mocks generated by Mockito 5.4.6 from annotations
// in test3/test/features/change_lang/changelang_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i4;

import 'package:get/get.dart' as _i2;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:test3/features/auth/presentation/controller/translation_controller.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeRxBool_0 extends _i1.SmartFake implements _i2.RxBool {
  _FakeRxBool_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxString_1 extends _i1.SmartFake implements _i2.RxString {
  _FakeRxString_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRx_2<T> extends _i1.SmartFake implements _i2.Rx<T> {
  _FakeRx_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternalFinalCallback_3<T> extends _i1.SmartFake
    implements _i2.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LanguageController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageController extends _i1.Mock
    implements _i3.LanguageController {
  MockLanguageController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RxBool get isChangingLanguage =>
      (super.noSuchMethod(
            Invocation.getter(#isChangingLanguage),
            returnValue: _FakeRxBool_0(
              this,
              Invocation.getter(#isChangingLanguage),
            ),
          )
          as _i2.RxBool);

  @override
  _i2.RxString get errorMessage =>
      (super.noSuchMethod(
            Invocation.getter(#errorMessage),
            returnValue: _FakeRxString_1(
              this,
              Invocation.getter(#errorMessage),
            ),
          )
          as _i2.RxString);

  @override
  _i2.RxBool get useSystemLocale =>
      (super.noSuchMethod(
            Invocation.getter(#useSystemLocale),
            returnValue: _FakeRxBool_0(
              this,
              Invocation.getter(#useSystemLocale),
            ),
          )
          as _i2.RxBool);

  @override
  _i2.Rx<_i4.Locale> get locale =>
      (super.noSuchMethod(
            Invocation.getter(#locale),
            returnValue: _FakeRx_2<_i4.Locale>(
              this,
              Invocation.getter(#locale),
            ),
          )
          as _i2.Rx<_i4.Locale>);

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_3<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_3<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  int get listeners =>
      (super.noSuchMethod(Invocation.getter(#listeners), returnValue: 0)
          as int);

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  int getLanguageCode(String? localeStr) =>
      (super.noSuchMethod(
            Invocation.method(#getLanguageCode, [localeStr]),
            returnValue: 0,
          )
          as int);

  @override
  _i5.Future<void> setSystemLanguage() =>
      (super.noSuchMethod(
            Invocation.method(#setSystemLanguage, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> changeLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#changeLanguage, [languageCode]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String> getSelectedLanguageForRegister() =>
      (super.noSuchMethod(
            Invocation.method(#getSelectedLanguageForRegister, []),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getSelectedLanguageForRegister, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> setLanguageFromLogin(int? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguageFromLogin, [languageCode]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void update([List<Object>? ids, bool? condition = true]) =>
      super.noSuchMethod(
        Invocation.method(#update, [ids, condition]),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Disposer addListener(_i7.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListener, [listener]),
            returnValue: () {},
          )
          as _i7.Disposer);

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void refresh() => super.noSuchMethod(
    Invocation.method(#refresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
    Invocation.method(#refreshGroup, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyChildrens() => super.noSuchMethod(
    Invocation.method(#notifyChildrens, []),
    returnValueForMissingStub: null,
  );

  @override
  void removeListenerId(Object? id, _i4.VoidCallback? listener) =>
      super.noSuchMethod(
        Invocation.method(#removeListenerId, [id, listener]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Disposer addListenerId(Object? key, _i7.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListenerId, [key, listener]),
            returnValue: () {},
          )
          as _i7.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
    Invocation.method(#disposeId, [id]),
    returnValueForMissingStub: null,
  );
}
